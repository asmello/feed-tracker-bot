AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sauce-bot

  A bot that delivers your sauces

Parameters:
  DBName:
    Default: saucebotdb
    Type: String
  DBUser:
    Default: saucer
    Type: String
  DBPassword:
    NoEcho: true
    Type: String
  LOGLEVEL:
    Default: DEBUG
    Type: String
  TelegramToken:
    NoEcho: true
    Type: String
  AdminUsers:
    Type: List<Number>


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    CodeUri: src
    Runtime: python3.7
    Environment:
      Variables:
        DATABASE_URL:
          # TODO: change to less privileged user
          !Sub postgres://${DBUser}:${DBPassword}@${DB.Endpoint.Address}:${DB.Endpoint.Port}/${DBName}
        LOG_LEVEL: !Ref LOGLEVEL

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: 172.31.0.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs ""]
      VpcId: !Ref VPC
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: NATPublicIP
    Properties:
      AllocationId: !GetAtt NATPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NATPublicIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sauce-bot-sg
      GroupDescription: "Security Group for SauceBot traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sauce-bot-db-sg
      GroupDescription: "Security Group for SauceBot database"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for Sauce Bot database"
      DBSubnetGroupName: sauce-bot-db-subnet-g
      SubnetIds:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB

  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: postgres
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup

  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: RequestAuthorizer
        Authorizers:
          RequestAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt AuthorizerFunction.Arn
          WebookRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              QueryStrings:
                - token  # ?token=<token>

  SauceBotFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: bot_events.handler
      FunctionName: sauce-bot-fn
      Events:
        Update:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref API
            Auth:
              Authorizer: WebookRequestAuthorizer
            Path: /webhook
            Method: post
      Tracing: Active
      Policies:
        - VPCAccessPolicy: {}
        - Version: "2012-10-17"
          Statement:
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Effect: Allow
              Resource: "*"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Environment:
        Variables:
          TELEGRAM_TOKEN: !Ref TelegramToken

  AdminFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: admin.handler
      FunctionName: sauce-bot-admin-fn
      Events:
        Update:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /admin
            Method: post
      Policies:
        - VPCAccessPolicy: {}
        - Version: "2012-10-17"
          Statement:
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Effect: Allow
              Resource: "*"
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
      Environment:
        Variables:
          ADMIN_USERS: !Join [",", !Ref AdminUsers]
          TELEGRAM_TOKEN: !Ref TelegramToken

  CrawlerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: crawler.handler
      FunctionName: sauce-bot-crawler-fn
      Events:
        Run:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      Policies:
        - VPCAccessPolicy: {}
        - Version: "2012-10-17"
          Statement:
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Effect: Allow
              Resource: "*"
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.request_handler
      Runtime: python3.7
      FunctionName: sauce-bot-authorizer-fn
      Policies:
        - VPCAccessPolicy: {}
        - Version: "2012-10-17"
          Statement:
            - Action:
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              Effect: Allow
              Resource: "*"
      Tracing: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB

Outputs:
  API:
    Description: "Telegram Bot Webhook"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook?token=nOtSeCrEt"
