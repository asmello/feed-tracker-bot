AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sauce-bot

  A bot that delivers your sauces

Parameters:
  DBName:
    Default: saucebotdb
    Type: String
  DBUser:
    Default: saucer
    Type: String
  DBPassword:
    Default: changeme
    NoEcho: true
    Type: String
  LOGLEVEL:
    Default: DEBUG
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    CodeUri: src
    Runtime: python3.7
    Environment:
      Variables:
        DATABASE_URL:
          # TODO: change to less privileged user
          !Sub postgres://${DBUser}:${DBPassword}@${DB.Endpoint.Address}:${DB.Endpoint.Port}/${DBName}
        LOG_LEVEL: !Ref LOGLEVEL

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2a
      VpcId: !Ref VPC
      CidrBlock: 172.31.0.0/20
      MapPublicIpOnLaunch: true
  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2b
      VpcId: !Ref VPC
      CidrBlock: 172.31.16.0/20
      MapPublicIpOnLaunch: true
  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-2c
      VpcId: !Ref VPC
      CidrBlock: 172.31.32.0/20
      MapPublicIpOnLaunch: true
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable
  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetA
  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetB
  SubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SubnetC
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: sauce-bot-sg
      GroupDescription: "Security Group for SauceBot traffic"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet Group for Sauce Bot database"
      DBSubnetGroupName: sauce-bot-db-subnet-g
      SubnetIds:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
  DB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      AllocatedStorage: 5
      DBInstanceClass: db.t2.micro
      Engine: postgres
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref SecurityGroup
  API:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: RequestAuthorizer
        Authorizers:
          RequestAuthorizer:
            FunctionPayloadType: TOKEN
            FunctionArn: !GetAtt AuthorizerFunction.Arn
          WebookRequestAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              QueryStrings:
                - token  # ?token=<token>
  SauceBotFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Handler: bot_events.handler
      FunctionName: sauce-bot-fn
      Events:
        Update:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref API
            Auth:
              Authorizer: WebookRequestAuthorizer
            Path: /webhook
            Method: post
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Environment:
        Variables:
          TELEGRAM_TOKEN: ''
  AdminFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: admin.handler
      FunctionName: sauce-bot-admin-fn
      Events:
        Update:
          Type: Api
          Properties:
            RestApiId: !Ref API
            Path: /admin
            Method: post
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Environment:
        Variables:
          ADMIN_USERS: ''
          TELEGRAM_TOKEN: ''
  CrawlerFunction:
    Type: AWS::Serverless::Function 
    Properties:
      Handler: crawler.handler
      FunctionName: sauce-bot-crawler-fn
      Events:
        Run:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: auth.request_handler
      Runtime: python3.7
      FunctionName: sauce-bot-authorizer-fn
      Policies:
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC

Outputs:
  API:
    Description: "Telegram Bot Webhook"
    Value: !Sub "https://${API}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook?token=nOtSeCrEt"
